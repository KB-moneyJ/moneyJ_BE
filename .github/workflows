name: Java CI/CD with Gradle

# 1. 언제 이 워크플로우를 실행할 것인가?
on:
  push:
    branches: [ "main" ] # main 브랜치에 push가 발생했을 때

# 2. 어떤 작업을 수행할 것인가?
jobs:
  build-and-deploy:
    # 3. 어떤 환경에서 실행할 것인가?
    runs-on: ubuntu-latest

    # 4. 어떤 단계(Step)들로 구성되어 있는가?
    steps:
      # (1) 코드 체크아웃: GitHub 저장소의 코드를 가상 서버로 내려받음
      - name: Checkout
        uses: actions/checkout@v4

      # (2) JDK 17 설정: 빌드를 위해 Java 17 환경을 구성
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # (3) Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # (4) Gradle 빌드 (CI): 프로젝트를 빌드하여 .jar 파일 생성
      # 참고: 테스트 문제가 해결되면 '-x test' 옵션은 꼭 제거해야 합니다!
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # (5) 빌드된 .jar 파일을 EC2로 전송 (CD)
      - name: Deploy to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }}
          port: 22
          source: "./build/libs/*.jar" # 빌드된 .jar 파일
          target: "/home/ubuntu/moneyj"  # EC2 서버의 배포 경로

      # (6) EC2에서 배포 스크립트 실행
      - name: Execute deployment script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }}
          port: 22
          script: "~/deploy.sh" # 2단계에서 만든 스크립트 실행
